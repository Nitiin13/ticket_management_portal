import { ElementRef, OnChanges } from "@angular/core";
import { MdlError } from "../common/mdl-error";
import * as i0 from "@angular/core";
export declare class MdlUnsupportedButtonTypeError extends MdlError {
    constructor(type: string);
}
export declare class MdlUnsupportedColoredTypeError extends MdlError {
    constructor(type: string);
}
export declare type MdlButtonType = "raised" | "fab" | "mini-fab" | "icon" | "";
export declare type MdlColorType = "primary" | "accent" | "";
export declare class MdlButtonComponent implements OnChanges {
    elementRef: ElementRef;
    isButton: boolean;
    mdlButtonType: MdlButtonType;
    mdlColoredType: MdlColorType;
    readonly element: HTMLElement;
    private disabledIntern;
    constructor(elementRef: ElementRef);
    get isDisable(): string | null;
    get raised(): boolean;
    get fab(): boolean;
    get miniFab(): boolean;
    get icon(): boolean;
    get primary(): boolean;
    get accent(): boolean;
    get disabled(): boolean;
    set disabled(value: boolean | string);
    onMouseUp(): void;
    onMouseLeave(): void;
    ngOnChanges(): void;
    blurIt(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdlButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdlButtonComponent, "mdl-button, button[mdl-button], a[mdl-button]", ["mdlButton"], { "mdlButtonType": "mdl-button-type"; "mdlColoredType": "mdl-colored"; "disabled": "disabled"; }, {}, never, ["*"], false, never>;
}

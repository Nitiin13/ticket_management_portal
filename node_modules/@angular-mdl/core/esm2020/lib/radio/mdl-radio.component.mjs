import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Injectable, Input, Optional, Output, Renderer2, ViewEncapsulation, } from "@angular/core";
import { FormGroupName, NG_VALUE_ACCESSOR, } from "@angular/forms";
import { toBoolean } from "../common/boolean-property";
import { noop } from "../common/noop";
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
const throwNameError = () => {
    throw new Error(`
      If you define both a name and a formControlName attribute on your radio button, their values
      must match. Ex: <mdl-radio formControlName="food" name="food"></mdl-radio>
    `);
};
const IS_FOCUSED = "is-focused";
// Registry for mdl-readio compnents. Is responsible to keep the
// right state of the radio buttons of a radio group. It would be
// easier if i had a mdl-radio-group component. but this would be
// a big braking change.
export class MdlRadioGroupRegisty {
    constructor() {
        this.defaultFormGroup = "defaultFromGroup";
        this.radioComponents = [];
    }
    add(radioComponent, formGroupName) {
        this.radioComponents.push({
            radio: radioComponent,
            group: formGroupName || this.defaultFormGroup,
        });
    }
    remove(radioComponent) {
        this.radioComponents = this.radioComponents.filter((radioComponentInArray) => radioComponentInArray.radio !== radioComponent);
    }
    select(radioComponent, formGroupName) {
        // unselect every radioComponent that is not the provided radiocomponent
        // and has the same name and is in teh same group.
        const groupToTest = formGroupName || this.defaultFormGroup;
        this.radioComponents.forEach((component) => {
            if (component.radio.name === radioComponent.name &&
                component.group === groupToTest) {
                if (component.radio !== radioComponent) {
                    component.radio.deselect(radioComponent.value);
                }
            }
        });
    }
}
MdlRadioGroupRegisty.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioGroupRegisty, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MdlRadioGroupRegisty.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioGroupRegisty, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioGroupRegisty, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root",
                }]
        }] });
/*
 <mdl-radio name="group1" value="1" [(ngModel)]="radioOption">Value 1</mdl-radio>
 */
export class MdlRadioComponent {
    constructor(elementRef, renderer, radioGroupRegistry, formGroupName) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.radioGroupRegistry = radioGroupRegistry;
        this.formGroupName = formGroupName;
        this.tabindex = null;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        // the internal state - used to set the underlaying radio button state.
        this.checked = false;
        this.isUpgraded = true;
        this.isRadio = true;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.disabledIntern = false;
        this.el = elementRef.nativeElement;
    }
    get disabled() {
        return this.disabledIntern;
    }
    set disabled(value) {
        this.disabledIntern = toBoolean(value);
    }
    onClick() {
        if (this.disabled) {
            return;
        }
        this.optionValue = this.value;
        this.updateCheckState();
        this.onChangeCallback();
        this.change.emit(this.optionValue);
    }
    ngOnInit() {
        // we need a name and it must be the same as in the formcontrol.
        // a radio group without name is useless.
        this.checkName();
        // register the radio button - this is the only chance to unselect the
        // radio button that is no longer active - scope the radio button with it's group
        // if there is one.
        this.radioGroupRegistry.add(this, this.formGroupName);
    }
    ngOnDestroy() {
        this.radioGroupRegistry.remove(this);
    }
    writeValue(optionValue) {
        this.optionValue = optionValue;
        this.updateCheckState();
    }
    deselect(value) {
        // called from the registry. the value is the value of the selected radio button
        // e.g. the radio button get unselected if it isnÄt the selected one.
        this.writeValue(value);
    }
    registerOnChange(fn) {
        // wrap the callback, so that we can call select on the registry
        this.onChangeCallback = () => {
            fn(this.value);
            this.radioGroupRegistry.select(this, this.formGroupName);
        };
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onFocus() {
        this.renderer.addClass(this.el, IS_FOCUSED);
    }
    onBlur() {
        this.renderer.removeClass(this.el, IS_FOCUSED);
    }
    spaceKeyPress() {
        this.checked = false; // in case of space key is pressed radio button value must remain same
    }
    updateCheckState() {
        this.checked = this.optionValue === this.value;
    }
    checkName() {
        if (this.name &&
            this.formControlName &&
            this.name !== this.formControlName) {
            throwNameError();
        }
        if (!this.name && this.formControlName) {
            this.name = this.formControlName;
        }
    }
}
MdlRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: MdlRadioGroupRegisty }, { token: i1.FormGroupName, optional: true }], target: i0.ɵɵFactoryTarget.Component });
MdlRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlRadioComponent, selector: "mdl-radio", inputs: { name: "name", formControlName: "formControlName", value: "value", tabindex: "tabindex", disabled: "disabled" }, outputs: { change: "change" }, host: { listeners: { "click": "onClick()" }, properties: { "class.is-checked": "this.checked", "class.is-upgraded": "this.isUpgraded", "class.mdl-radio": "this.isRadio", "class.is-disabled": "this.disabled" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MdlRadioComponent),
            multi: true,
        },
    ], ngImport: i0, template: `
    <input
      type="checkbox"
      class="mdl-radio__button"
      [attr.name]="name"
      (focus)="onFocus()"
      (blur)="onBlur()"
      (keyup.space)="spaceKeyPress()"
      [disabled]="disabled"
      [attr.tabindex]="tabindex"
      [(ngModel)]="checked"
    />
    <span class="mdl-radio__label"><ng-content></ng-content></span>
    <span class="mdl-radio__outer-circle"></span>
    <span class="mdl-radio__inner-circle"></span>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mdl-radio",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MdlRadioComponent),
                            multi: true,
                        },
                    ],
                    template: `
    <input
      type="checkbox"
      class="mdl-radio__button"
      [attr.name]="name"
      (focus)="onFocus()"
      (blur)="onBlur()"
      (keyup.space)="spaceKeyPress()"
      [disabled]="disabled"
      [attr.tabindex]="tabindex"
      [(ngModel)]="checked"
    />
    <span class="mdl-radio__label"><ng-content></ng-content></span>
    <span class="mdl-radio__outer-circle"></span>
    <span class="mdl-radio__inner-circle"></span>
  `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: MdlRadioGroupRegisty }, { type: i1.FormGroupName, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { name: [{
                type: Input
            }], formControlName: [{
                type: Input
            }], value: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], 
        // eslint-disable-next-line @angular-eslint/no-output-native
        change: [{
                type: Output
            }], checked: [{
                type: HostBinding,
                args: ["class.is-checked"]
            }], isUpgraded: [{
                type: HostBinding,
                args: ["class.is-upgraded"]
            }], isRadio: [{
                type: HostBinding,
                args: ["class.mdl-radio"]
            }], disabled: [{
                type: HostBinding,
                args: ["class.is-disabled"]
            }, {
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ["click"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, EventEmitter, HostBinding, Input, Output, } from "@angular/core";
import { MdlDialogService } from "./mdl-dialog.service";
import * as i0 from "@angular/core";
import * as i1 from "./mdl-dialog.service";
export class MdlAlertComponent {
    constructor(mdlDialogService) {
        this.mdlDialogService = mdlDialogService;
        this.message = "";
        this.display = "none";
        this.confirmed = new EventEmitter();
    }
    show() {
        this.mdlDialogService
            .alert(this.message, this.okText, this.title)
            .subscribe(() => {
            this.confirmed.emit();
        });
    }
}
MdlAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlAlertComponent, deps: [{ token: i1.MdlDialogService }], target: i0.ɵɵFactoryTarget.Component });
MdlAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlAlertComponent, selector: "mdl-alert", inputs: { title: "title", message: "message", okText: "okText" }, outputs: { confirmed: "confirmed" }, host: { properties: { "style.display": "this.display" } }, exportAs: ["mdlAlert"], ngImport: i0, template: ``, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mdl-alert",
                    template: ``,
                    exportAs: "mdlAlert",
                }]
        }], ctorParameters: function () { return [{ type: i1.MdlDialogService }]; }, propDecorators: { title: [{
                type: Input
            }], message: [{
                type: Input
            }], okText: [{
                type: Input
            }], display: [{
                type: HostBinding,
                args: ["style.display"]
            }], confirmed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWFsZXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9kaWFsb2cvbWRsLWFsZXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7O0FBT3hELE1BQU0sT0FBTyxpQkFBaUI7SUFnQjVCLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWHRELFlBQU8sR0FBRyxFQUFFLENBQUM7UUFNYixZQUFPLEdBQUcsTUFBTSxDQUFDO1FBR2pCLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTBCLENBQUM7SUFFMUQsSUFBSTtRQUNGLElBQUksQ0FBQyxnQkFBZ0I7YUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQzVDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7OEdBeEJVLGlCQUFpQjtrR0FBakIsaUJBQWlCLDJPQUhsQixFQUFFOzJGQUdELGlCQUFpQjtrQkFMN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osUUFBUSxFQUFFLFVBQVU7aUJBQ3JCO3VHQUdDLEtBQUs7c0JBREosS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUs7Z0JBSU4sTUFBTTtzQkFETCxLQUFLO2dCQUlOLE9BQU87c0JBRE4sV0FBVzt1QkFBQyxlQUFlO2dCQUk1QixTQUFTO3NCQURSLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPdXRwdXQsXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNZGxEaWFsb2dTZXJ2aWNlIH0gZnJvbSBcIi4vbWRsLWRpYWxvZy5zZXJ2aWNlXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJtZGwtYWxlcnRcIixcbiAgdGVtcGxhdGU6IGBgLFxuICBleHBvcnRBczogXCJtZGxBbGVydFwiLFxufSlcbmV4cG9ydCBjbGFzcyBNZGxBbGVydENvbXBvbmVudCB7XG4gIEBJbnB1dCgpXG4gIHRpdGxlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgQElucHV0KClcbiAgbWVzc2FnZSA9IFwiXCI7XG5cbiAgQElucHV0KClcbiAgb2tUZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgQEhvc3RCaW5kaW5nKFwic3R5bGUuZGlzcGxheVwiKVxuICBkaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgQE91dHB1dCgpXG4gIGNvbmZpcm1lZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1kbERpYWxvZ1NlcnZpY2U6IE1kbERpYWxvZ1NlcnZpY2UpIHt9XG5cbiAgc2hvdygpOiB2b2lkIHtcbiAgICB0aGlzLm1kbERpYWxvZ1NlcnZpY2VcbiAgICAgIC5hbGVydCh0aGlzLm1lc3NhZ2UsIHRoaXMub2tUZXh0LCB0aGlzLnRpdGxlKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuY29uZmlybWVkLmVtaXQoKTtcbiAgICAgIH0pO1xuICB9XG59XG4iXX0=
import { ComponentFactoryResolver, EventEmitter, Injectable, Injector, ViewContainerRef, } from "@angular/core";
import { Subject } from "rxjs";
import { MdlSimpleDialogComponent } from "./mdl-simple-dialog.component";
import { MdlDialogHostComponent } from "./mdl-dialog-host.component";
import { InternalMdlDialogReference } from "./internal-dialog-reference";
import { MdlDialogOutletService } from "../dialog-outlet/mdl-dialog-outlet.service";
import { MdlDialogReference } from "./mdl-dialog-reference";
import { MDL_CONFIGUARTION, MIN_DIALOG_Z_INDEX } from "./config";
import * as i0 from "@angular/core";
import * as i1 from "../dialog-outlet/mdl-dialog-outlet.service";
/**
 * The MdlDialogService is used to open different kind of dialogs. SimpleDialogs and Custom Dialogs.
 *
 * @experimental
 */
export class MdlDialogService {
    constructor(componentFactoryResolver, mdlDialogOutletService, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.mdlDialogOutletService = mdlDialogOutletService;
        this.injector = injector;
        /**
         * Emits an event when either all modals are closed, or one gets opened.
         *
         * @returns A subscribable event emitter that provides a boolean indicating whether a modal is open or not.
         */
        this.onDialogsOpenChanged = new EventEmitter();
        this.openDialogs = new Array();
        this.mdlDialogOutletService.backdropClickEmitter.subscribe(() => {
            this.onBackdropClick();
        });
    }
    /**
     * Shows a dialog that is just an alert - e.g. with one button.
     *
     * @param alertMessage The message that should be displayed.
     * @param okText The text that the button should have
     * @param title The optional title of the dialog
     * returns An Observable that is called if the user hits the Ok button.
     */
    alert(alertMessage, okText = "Ok", title) {
        const result = new Subject();
        this.showDialog({
            title,
            message: alertMessage,
            actions: [
                {
                    handler: () => {
                        result.next();
                        result.complete();
                    },
                    text: okText,
                },
            ],
            isModal: true,
        });
        return result;
    }
    /**
     * Shows a dialog that is just a confirm message - e.g. with two button.
     *
     * @param question The question that should be displayed.
     * @param title The title that should be displayed on top of Question.
     * @param declineText The text for decline button. defaults to Cancel
     * @param confirmText The text for the confirm button . defaults to Ok
     * returns An Observable that is called if the user hits the Ok button.
     */
    confirm(question, declineText = "Cancel", confirmText = "Ok", title) {
        const result = new Subject();
        this.showDialog({
            title,
            message: question,
            actions: [
                {
                    handler: () => {
                        result.next();
                        result.complete();
                    },
                    text: confirmText,
                },
                {
                    handler: () => {
                        result.error(null);
                    },
                    text: declineText,
                    isClosingAction: true,
                },
            ],
            isModal: true,
        });
        return result.asObservable();
    }
    /**
     * Shows a dialog that is specified by the provided configuration.
     *
     * @param config The simple dialog configuration.
     * returns An Observable that returns the MdlDialogReference.
     */
    showDialog(config) {
        if (config.actions.length === 0) {
            throw new Error("a dialog mus have at least one action");
        }
        const internalDialogRef = new InternalMdlDialogReference(config);
        const providers = [
            {
                provide: MdlDialogReference,
                useValue: new MdlDialogReference(internalDialogRef),
            },
            { provide: MDL_CONFIGUARTION, useValue: config },
        ];
        const hostComponentRef = this.createHostDialog(internalDialogRef, config);
        this.createComponentInstance(hostComponentRef?.instance?.dialogTarget, providers, MdlSimpleDialogComponent);
        return this.showHostDialog(internalDialogRef.dialogRef, hostComponentRef);
    }
    /**
     * Shows a dialog that is specified by the provided configuration.
     *
     * @param config The custom dialog configuration.
     * returns An Observable that returns the MdlDialogReference.
     */
    showCustomDialog(config) {
        const internalDialogRef = new InternalMdlDialogReference(config);
        const providers = [
            {
                provide: MdlDialogReference,
                useValue: new MdlDialogReference(internalDialogRef),
            },
        ];
        if (config.providers) {
            providers.push(...config.providers);
        }
        const hostComponentRef = this.createHostDialog(internalDialogRef, config);
        this.createComponentInstance(hostComponentRef?.instance.dialogTarget, providers, config.component);
        return this.showHostDialog(internalDialogRef.dialogRef, hostComponentRef);
    }
    showDialogTemplate(template, config) {
        const internalDialogRef = new InternalMdlDialogReference(config);
        const hostComponentRef = this.createHostDialog(internalDialogRef, config);
        hostComponentRef?.instance.dialogTarget?.createEmbeddedView(template);
        return this.showHostDialog(internalDialogRef.dialogRef, hostComponentRef);
    }
    showHostDialog(dialogRef, hostComponentRef) {
        const result = new Subject();
        setTimeout(() => {
            result.next(dialogRef);
            result.complete();
            hostComponentRef?.instance.show();
        });
        return result.asObservable();
    }
    createHostDialog(internalDialogRef, dialogConfig) {
        const viewContainerRef = this.mdlDialogOutletService.viewContainerRef;
        if (!viewContainerRef) {
            throw new Error("You did not provide a ViewContainerRef. " +
                "Please see https://github.com/mseemann/angular2-mdl/wiki/How-to-use-the-MdlDialogService");
        }
        const providers = [
            { provide: MDL_CONFIGUARTION, useValue: dialogConfig },
            { provide: InternalMdlDialogReference, useValue: internalDialogRef },
        ];
        const hostDialogComponent = this.createComponentInstance(viewContainerRef, providers, MdlDialogHostComponent);
        internalDialogRef.hostDialogComponentRef = hostDialogComponent;
        internalDialogRef.isModal = dialogConfig.isModal;
        internalDialogRef.closeCallback = () => {
            this.popDialog(internalDialogRef);
            hostDialogComponent?.instance.hide(hostDialogComponent);
        };
        this.pushDialog(internalDialogRef);
        return hostDialogComponent;
    }
    pushDialog(dialogRef) {
        if (this.openDialogs.length === 0) {
            // first dialog being opened
            this.onDialogsOpenChanged.emit(true);
        }
        this.openDialogs.push(dialogRef);
        this.orderDialogStack();
    }
    popDialog(dialogRef) {
        this.openDialogs.splice(this.openDialogs.indexOf(dialogRef), 1);
        this.orderDialogStack();
        if (this.openDialogs.length === 0) {
            // last dialog being closed
            this.onDialogsOpenChanged.emit(false);
        }
    }
    orderDialogStack() {
        // +1 because the overlay may have MIN_DIALOG_Z_INDEX if the dialog is modal.
        let zIndex = MIN_DIALOG_Z_INDEX + 1;
        this.openDialogs.forEach((iDialogRef) => {
            if (iDialogRef.hostDialog) {
                iDialogRef.hostDialog.zIndex = zIndex;
            }
            // +2 to make room for the overlay if a dialog is modal
            zIndex += 2;
        });
        this.mdlDialogOutletService.hideBackdrop();
        // if there is a modal dialog append the overloay to the dom - if not remove the overlay from the body
        const topMostModalDialog = this.getTopMostInternalDialogRef();
        if (topMostModalDialog) {
            // move the overlay diredct under the topmos modal dialog
            this.mdlDialogOutletService.showBackdropWithZIndex(topMostModalDialog?.hostDialog?.zIndex
                ? topMostModalDialog.hostDialog.zIndex - 1
                : 0);
        }
    }
    getTopMostInternalDialogRef() {
        let topMostModalDialog = null;
        for (let i = this.openDialogs.length - 1; i >= 0; i--) {
            if (this.openDialogs[i].isModal) {
                topMostModalDialog = this.openDialogs[i];
                break;
            }
        }
        return topMostModalDialog;
    }
    onBackdropClick() {
        const topMostModalDialog = this.getTopMostInternalDialogRef();
        if (topMostModalDialog?.config.clickOutsideToClose) {
            topMostModalDialog?.hide();
        }
    }
    createComponentInstance(viewContainerRef, providers, component) {
        const cFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        const injector = Injector.create({
            providers: [
                ...providers,
                { provide: ViewContainerRef, useValue: viewContainerRef },
            ],
            parent: this.injector,
        });
        return viewContainerRef?.createComponent(cFactory, viewContainerRef.length, injector);
    }
}
MdlDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDialogService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1.MdlDialogOutletService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
MdlDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDialogService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root",
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1.MdlDialogOutletService }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,
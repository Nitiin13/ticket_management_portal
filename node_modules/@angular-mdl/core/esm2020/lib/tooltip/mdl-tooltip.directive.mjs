import { ComponentFactoryResolver, Directive, HostListener, Input, ViewContainerRef, } from "@angular/core";
import { MdlSimpleTooltipComponent, MdlTooltipComponent, } from "./mdl-tooltip.component";
import * as i0 from "@angular/core";
export class AbstractMdlTooltipDirective {
    constructor(vcRef, large, componentFactoryResolver) {
        this.vcRef = vcRef;
        this.large = large;
        this.componentFactoryResolver = componentFactoryResolver;
        this.position = "top";
    }
    onMouseEnter(event) {
        this.tooltipComponent?.mouseEnter(event);
    }
    onMouseLeave() {
        this.tooltipComponent?.mouseLeave();
    }
    ngOnInit() {
        // if the tooltip is not an instance of MdlTooltipComponent
        // we create a simpleTooltipComponent on the fly.
        if (!(this.tooltip instanceof MdlTooltipComponent)) {
            const cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlSimpleTooltipComponent);
            const cRef = this.vcRef.createComponent(cFactory);
            this.tooltipComponent = cRef.instance;
            if (this.tooltipComponent) {
                this.tooltipComponent.tooltipText = this.tooltip;
            }
            this.configureTooltipComponent();
        }
        else {
            this.tooltipComponent = this.tooltip;
            this.configureTooltipComponent();
        }
    }
    ngOnChanges(changes) {
        if (changes["tooltip"] && !changes["tooltip"].isFirstChange()) {
            if (!(this.tooltip instanceof MdlTooltipComponent)) {
                if (this.tooltipComponent) {
                    this.tooltipComponent.tooltipText = this.tooltip;
                }
            }
        }
    }
    configureTooltipComponent() {
        if (this.tooltipComponent) {
            this.tooltipComponent.large = this.large;
            this.tooltipComponent.position = this.position;
        }
    }
}
AbstractMdlTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AbstractMdlTooltipDirective, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
AbstractMdlTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: AbstractMdlTooltipDirective, host: { listeners: { "touchend": "onMouseEnter($event)", "mouseenter": "onMouseEnter($event)", "window:touchstart": "onMouseLeave()", "mouseleave": "onMouseLeave()" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AbstractMdlTooltipDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { onMouseEnter: [{
                type: HostListener,
                args: ["touchend", ["$event"]]
            }, {
                type: HostListener,
                args: ["mouseenter", ["$event"]]
            }], onMouseLeave: [{
                type: HostListener,
                args: ["window:touchstart"]
            }, {
                type: HostListener,
                args: ["mouseleave"]
            }] } });
export class MdlTooltipDirective extends AbstractMdlTooltipDirective {
    constructor(vcRef, componentFactoryResolver) {
        super(vcRef, false, componentFactoryResolver);
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.position = "top";
    }
}
MdlTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTooltipDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });
MdlTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlTooltipDirective, selector: "[mdl-tooltip]", inputs: { tooltip: ["mdl-tooltip", "tooltip"], position: ["mdl-tooltip-position", "position"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "[mdl-tooltip]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { tooltip: [{
                type: Input,
                args: ["mdl-tooltip"]
            }], position: [{
                type: Input,
                args: ["mdl-tooltip-position"]
            }] } });
export class MdlTooltipLargeDirective extends AbstractMdlTooltipDirective {
    constructor(vcRef, componentFactoryResolver) {
        super(vcRef, true, componentFactoryResolver);
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.position = "top";
    }
}
MdlTooltipLargeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTooltipLargeDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });
MdlTooltipLargeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlTooltipLargeDirective, selector: "[mdl-tooltip-large]", inputs: { tooltip: ["mdl-tooltip-large", "tooltip"], position: ["mdl-tooltip-position", "position"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTooltipLargeDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "[mdl-tooltip-large]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { tooltip: [{
                type: Input,
                args: ["mdl-tooltip-large"]
            }], position: [{
                type: Input,
                args: ["mdl-tooltip-position"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
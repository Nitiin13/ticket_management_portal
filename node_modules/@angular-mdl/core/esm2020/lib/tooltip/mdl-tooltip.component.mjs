import { Component, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation, } from "@angular/core";
import { MdlTooltipPositionService } from "./mdl-tooltip-position.service";
import * as i0 from "@angular/core";
import * as i1 from "./mdl-tooltip-position.service";
const IS_ACTIVE = "is-active";
export class MdlSimpleTooltipComponent {
    constructor(elRef, renderer, mdlTooltipPositionService) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.mdlTooltipPositionService = mdlTooltipPositionService;
        this.large = false;
        this.position = "top";
        this.isTooltip = true;
        this.tooltipText = "";
        this.active = false;
        this.element = elRef.nativeElement;
    }
    get isBottom() {
        return this.position === "bottom";
    }
    get isRight() {
        return this.position === "right";
    }
    get isLeft() {
        return this.position === "left";
    }
    isTop() {
        return this.position === "top";
    }
    mouseLeave() {
        if (this.delayTimeout) {
            clearTimeout(this.delayTimeout);
        }
        this.setActive(false);
    }
    mouseEnter(event) {
        if (this.delay) {
            this.delayTimeout = setTimeout(() => {
                this.show(event.target);
            }, this.delay);
        }
        else {
            this.show(event.target);
        }
    }
    isActive() {
        return this.active;
    }
    show(element) {
        const props = element.getBoundingClientRect();
        const offsetWidth = this.element.offsetWidth;
        const offsetHeight = this.element.offsetHeight;
        const style = this.mdlTooltipPositionService.calcStyle(offsetWidth, offsetHeight, props, this.position);
        for (const key of Object.keys(style)) {
            this.renderer.setStyle(this.elRef.nativeElement, key, style[key]);
        }
        this.setActive(true);
    }
    setActive(active) {
        this.active = active;
        if (active) {
            this.renderer.addClass(this.elRef.nativeElement, IS_ACTIVE);
        }
        else {
            this.renderer.removeClass(this.elRef.nativeElement, IS_ACTIVE);
        }
    }
}
MdlSimpleTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlSimpleTooltipComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.MdlTooltipPositionService }], target: i0.ɵɵFactoryTarget.Component });
MdlSimpleTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlSimpleTooltipComponent, selector: "mdl-simple-tooltip", inputs: { position: "position", delay: "delay" }, host: { properties: { "class.mdl-tooltip--large": "this.large", "class.mdl-tooltip": "this.isTooltip", "class.mdl-tooltip--bottom": "this.isBottom", "class.mdl-tooltip--right": "this.isRight", "class.mdl-tooltip--left": "this.isLeft", "class.mdl-tooltip--top": "this.isTop" } }, providers: [MdlTooltipPositionService], ngImport: i0, template: "<div>{{tooltipText}}</div>", isInline: true, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlSimpleTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mdl-simple-tooltip",
                    template: "<div>{{tooltipText}}</div>",
                    providers: [MdlTooltipPositionService],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.MdlTooltipPositionService }]; }, propDecorators: { large: [{
                type: HostBinding,
                args: ["class.mdl-tooltip--large"]
            }], position: [{
                type: Input
            }], delay: [{
                type: Input
            }], isTooltip: [{
                type: HostBinding,
                args: ["class.mdl-tooltip"]
            }], isBottom: [{
                type: HostBinding,
                args: ["class.mdl-tooltip--bottom"]
            }], isRight: [{
                type: HostBinding,
                args: ["class.mdl-tooltip--right"]
            }], isLeft: [{
                type: HostBinding,
                args: ["class.mdl-tooltip--left"]
            }], isTop: [{
                type: HostBinding,
                args: ["class.mdl-tooltip--top"]
            }] } });
export class MdlTooltipComponent extends MdlSimpleTooltipComponent {
    constructor(elRef, renderer, mdlTooltipPositionService) {
        super(elRef, renderer, mdlTooltipPositionService);
    }
}
MdlTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTooltipComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.MdlTooltipPositionService }], target: i0.ɵɵFactoryTarget.Component });
MdlTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlTooltipComponent, selector: "mdl-tooltip", providers: [MdlTooltipPositionService], exportAs: ["mdlTooltip"], usesInheritance: true, ngImport: i0, template: "<div><ng-content></ng-content></div>", isInline: true, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTooltipComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mdl-tooltip",
                    template: "<div><ng-content></ng-content></div>",
                    exportAs: "mdlTooltip",
                    providers: [MdlTooltipPositionService],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.MdlTooltipPositionService }]; } });
//# sourceMappingURL=data:application/json;base64,
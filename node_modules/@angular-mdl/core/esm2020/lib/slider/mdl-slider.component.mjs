import { Component, ElementRef, forwardRef, HostBinding, HostListener, Input, Renderer2, ViewChild, ViewEncapsulation, } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { toBoolean } from "../common/boolean-property";
import { noop } from "../common/noop";
import { callNative } from "../common/native-support";
import { toNumber } from "../common/number.property";
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class MdlSliderComponent {
    constructor(renderer, elRef) {
        this.renderer = renderer;
        this.elRef = elRef;
        this.isSliderContainer = true;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.disabledIntern = false;
    }
    get disabled() {
        return this.disabledIntern;
    }
    set disabled(value) {
        this.disabledIntern = toBoolean(value);
    }
    get value() {
        return this.valueIntern;
    }
    set value(v) {
        this.valueIntern = toNumber(v);
        this.updateSliderUI();
        this.onChangeCallback(v);
    }
    onMouseUp(event) {
        event.target.blur();
    }
    onMouseDown(event) {
        if (event.target !== this.elRef.nativeElement) {
            return;
        }
        // Discard the original event and create a new event that
        // is on the slider element.
        event.preventDefault();
        const newEvent = new MouseEvent("mousedown", {
            relatedTarget: event.relatedTarget,
            button: event.button,
            buttons: event.buttons,
            clientX: event.clientX,
            clientY: this.inputEl?.nativeElement.getBoundingClientRect().y,
            screenX: event.screenX,
            screenY: event.screenY,
        });
        callNative(this.inputEl?.nativeElement, "dispatchEvent", newEvent);
    }
    ngAfterViewInit() {
        this.updateSliderUI();
    }
    writeValue(value) {
        this.valueIntern = value;
        this.updateSliderUI();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    updateSliderUI() {
        // if the input hat a static value (for example value="30"
        // the setvalue method is called before the ViewChilds are initialized
        // this has changed in Angular 9! :(
        const min = toNumber(this.min);
        const max = toNumber(this.max);
        if (!this.inputEl ||
            this.valueIntern == null ||
            max == null ||
            min == null) {
            return;
        }
        const fraction = (this.valueIntern - min) / (max - min);
        if (fraction === 0) {
            this.renderer.addClass(this.inputEl.nativeElement, "is-lowest-value");
        }
        else {
            this.renderer.removeClass(this.inputEl.nativeElement, "is-lowest-value");
        }
        this.renderer.setStyle(this.lowerEl?.nativeElement, "flex", "" + fraction);
        this.renderer.setStyle(this.upperEl?.nativeElement, "flex", "" + (1 - fraction));
    }
}
MdlSliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlSliderComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
MdlSliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlSliderComponent, selector: "mdl-slider", inputs: { min: "min", max: "max", step: "step", disabled: "disabled", value: "value" }, host: { listeners: { "mouseup": "onMouseUp($event)", "mousedown": "onMouseDown($event)" }, properties: { "class.mdl-slider__container": "this.isSliderContainer" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MdlSliderComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "lowerEl", first: true, predicate: ["lower"], descendants: true, static: true }, { propertyName: "upperEl", first: true, predicate: ["uppper"], descendants: true, static: true }, { propertyName: "inputEl", first: true, predicate: ["input"], descendants: true, static: true }], ngImport: i0, template: `
    <input
      class="mdl-slider is-upgraded"
      type="range"
      [min]="min"
      [max]="max"
      [step]="step"
      [(ngModel)]="value"
      [disabled]="disabled"
      tabindex="0"
      #input
    />
    <div class="mdl-slider__background-flex">
      <div class="mdl-slider__background-lower" #lower></div>
      <div class="mdl-slider__background-upper" #uppper></div>
    </div>
  `, isInline: true, styles: [":host{height:22px;user-select:none;-webkit-user-select:none;-moz-user-select:none}\n"], dependencies: [{ kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlSliderComponent, decorators: [{
            type: Component,
            args: [{ selector: "mdl-slider", providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MdlSliderComponent),
                            multi: true,
                        },
                    ], template: `
    <input
      class="mdl-slider is-upgraded"
      type="range"
      [min]="min"
      [max]="max"
      [step]="step"
      [(ngModel)]="value"
      [disabled]="disabled"
      tabindex="0"
      #input
    />
    <div class="mdl-slider__background-flex">
      <div class="mdl-slider__background-lower" #lower></div>
      <div class="mdl-slider__background-upper" #uppper></div>
    </div>
  `, encapsulation: ViewEncapsulation.None, styles: [":host{height:22px;user-select:none;-webkit-user-select:none;-moz-user-select:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], step: [{
                type: Input
            }], lowerEl: [{
                type: ViewChild,
                args: ["lower", { static: true }]
            }], upperEl: [{
                type: ViewChild,
                args: ["uppper", { static: true }]
            }], inputEl: [{
                type: ViewChild,
                args: ["input", { static: true }]
            }], isSliderContainer: [{
                type: HostBinding,
                args: ["class.mdl-slider__container"]
            }], disabled: [{
                type: Input
            }], value: [{
                type: Input
            }], onMouseUp: [{
                type: HostListener,
                args: ["mouseup", ["$event"]]
            }], onMouseDown: [{
                type: HostListener,
                args: ["mousedown", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Directive, ElementRef, Input, Renderer2, } from "@angular/core";
import { MaterialRipple } from "./ripple.vendor";
import * as i0 from "@angular/core";
const RIPPLE = "mdl-ripple";
// known bugs: https://github.com/google/material-design-lite/issues/4215
export class MdlRippleDirective {
    constructor(elementRef, renderer, cssContainerClasses) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.cssContainerClasses = cssContainerClasses;
        this.rippleActive = true;
        this.el = elementRef.nativeElement;
    }
    ngOnChanges() {
        // remove any existing ripple container
        if (this.rippleContainer) {
            this.el.removeChild(this.rippleContainer);
            delete this.rippleContainer;
            delete this.ripple;
        }
        // if used as mdl-ripple without property binding it is an empty string
        // otherwise (e.g. [mdl-ripple] it is a boolean - may be with the default value true.
        if (this.rippleActive === "" || this.rippleActive) {
            this.rippleContainer = this.renderer.createElement("span");
            this.cssContainerClasses.forEach((cssClass) => {
                this.renderer.addClass(this.rippleContainer, cssClass);
            });
            const rippleElement = this.renderer.createElement("span");
            this.renderer.addClass(rippleElement, RIPPLE);
            this.rippleContainer?.appendChild(rippleElement);
            if (this.rippleContainer) {
                this.el.appendChild(this.rippleContainer);
            }
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            this.ripple = new MaterialRipple(this.renderer, this.el);
        }
    }
}
MdlRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRippleDirective, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
MdlRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlRippleDirective, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRippleDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined }]; } });
export class MdlButtonRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, ["mdl-button__ripple-container"]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlButtonRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlButtonRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlButtonRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlButtonRippleDirective, selector: "mdl-button[mdl-ripple], button[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlButtonRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "mdl-button[mdl-ripple], button[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
export class MdlCheckboxRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-checkbox__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlCheckboxRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlCheckboxRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlCheckboxRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlCheckboxRippleDirective, selector: "mdl-checkbox[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlCheckboxRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "mdl-checkbox[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
export class MdlRadioRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-radio__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlRadioRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlRadioRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlRadioRippleDirective, selector: "mdl-radio[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlRadioRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "mdl-radio[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
export class MdlIconToggleRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-icon-toggle__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlIconToggleRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlIconToggleRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlIconToggleRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlIconToggleRippleDirective, selector: "mdl-icon-toggle[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlIconToggleRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "mdl-icon-toggle[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
export class MdlSwitchRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-switch__ripple-container",
            "mdl-ripple--center",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlSwitchRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlSwitchRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlSwitchRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlSwitchRippleDirective, selector: "mdl-switch[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlSwitchRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "mdl-switch[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
export class MdlMenuItemRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, ["mdl-menu__item--ripple-container"]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlMenuItemRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlMenuItemRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlMenuItemRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlMenuItemRippleDirective, selector: "mdl-menu-item[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlMenuItemRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "mdl-menu-item[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
export class MdlAnchorRippleDirective extends MdlRippleDirective {
    constructor(elementRef, renderer) {
        super(elementRef, renderer, [
            "mdl-tabs__ripple-container",
            "mdl-layout__tab-ripple-container",
        ]);
        // eslint-disable-next-line
        this.rippleActive = true;
    }
}
MdlAnchorRippleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlAnchorRippleDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlAnchorRippleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlAnchorRippleDirective, selector: "a[mdl-ripple],div[mdl-ripple]", inputs: { rippleActive: ["mdl-ripple", "rippleActive"] }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlAnchorRippleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "a[mdl-ripple],div[mdl-ripple]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rippleActive: [{
                type: Input,
                args: ["mdl-ripple"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
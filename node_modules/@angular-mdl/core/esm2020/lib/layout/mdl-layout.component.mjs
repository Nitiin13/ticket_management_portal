import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Input, NgZone, Optional, Output, QueryList, Renderer2, ViewEncapsulation, } from "@angular/core";
import { EventManager } from "@angular/platform-browser";
import { MdlLayoutHeaderComponent } from "./mdl-layout-header.component";
import { MdlLayoutDrawerComponent } from "./mdl-layout-drawer.component";
import { MdlLayoutContentComponent } from "./mdl-layout-content.component";
import { BehaviorSubject } from "rxjs";
import { toBoolean } from "../common/boolean-property";
import { toNumber } from "../common/number.property";
import { MdlError } from "../common/mdl-error";
import { MdlLayoutMediatorService } from "./mdl-layout-mediator.service";
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "./mdl-layout-mediator.service";
import * as i3 from "../icon/mdl-icon.component";
import * as i4 from "@angular/common";
const ESCAPE = 27;
const STANDARD = "standard";
const WATERFALL = "waterfall";
const SCROLL = "scroll";
/**
 * The LAYOUT_SCREEN_SIZE_THRESHOLD can be changed at the root module. Just provide a value for this InjectionToken:
 *
 * providers: [
 *  {provide:LAYOUT_SCREEN_SIZE_THRESHOLD, useValue: 768 }
 * ]
 *
 * you also need to change the scss variable to the same value: $layout-screen-size-threshold: 768px.
 *
 * It should be clear that this can only be used if you are using the scss and not the pre compiled css from getmdl.io.
 *
 */
export const LAYOUT_SCREEN_SIZE_THRESHOLD = new InjectionToken("layoutScreenSizeThreshold");
export class MdLUnsupportedLayoutTypeError extends MdlError {
    constructor(type) {
        /* istanbul ignore next */
        super(`Layout type "${type}" isn't supported by mdl-layout (allowed: standard, waterfall, scroll).`);
    }
}
export class MdlScreenSizeService {
    constructor(ngZone, layoutScreenSizeThreshold) {
        this.layoutScreenSizeThreshold = layoutScreenSizeThreshold;
        this.sizesSubject = new BehaviorSubject(false);
        this.windowMediaQueryListener = null;
        // if no value is injected the default size wil be used. same as $layout-screen-size-threshold in scss
        if (!this.layoutScreenSizeThreshold) {
            this.layoutScreenSizeThreshold = 1024;
        }
        // do not try to access the window object if rendered on the server
        if (typeof window === "object" && "matchMedia" in window) {
            const query = window.matchMedia(`(max-width: ${this.layoutScreenSizeThreshold}px)`);
            const queryListener = () => {
                ngZone.run(() => {
                    this.sizesSubject.next(query.matches);
                });
            };
            // - addEventListener not working in Safari
            // eslint-disable-next-line
            query.addListener(queryListener);
            this.windowMediaQueryListener = () => {
                // eslint-disable-next-line
                query.removeListener(queryListener);
            };
            // set the initial state
            this.sizesSubject.next(query.matches);
        }
    }
    isSmallScreen() {
        return this.sizesSubject.value;
    }
    sizes() {
        return this.sizesSubject.asObservable();
    }
    destroy() {
        if (this.windowMediaQueryListener) {
            this.windowMediaQueryListener();
            this.windowMediaQueryListener = null;
        }
    }
}
MdlScreenSizeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlScreenSizeService, deps: [{ token: i0.NgZone }, { token: LAYOUT_SCREEN_SIZE_THRESHOLD, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
MdlScreenSizeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlScreenSizeService, providedIn: "root" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlScreenSizeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root",
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LAYOUT_SCREEN_SIZE_THRESHOLD]
                }] }]; } });
export class MdlLayoutComponent {
    constructor(renderer, evm, el, screenSizeService, layoutMediatorService) {
        this.renderer = renderer;
        this.evm = evm;
        this.el = el;
        this.screenSizeService = screenSizeService;
        this.layoutMediatorService = layoutMediatorService;
        // will be set to undefined, if not a direct child or not present in 2.0.0 i
        // n 2.0.1 it is now the grand child drawer again :(
        this.drawers = new QueryList();
        // eslint-disable-next-line
        this.mode = STANDARD;
        // eslint-disable-next-line
        this.selectedTabEmitter = new EventEmitter();
        // eslint-disable-next-line
        this.mouseoverTabEmitter = new EventEmitter();
        // eslint-disable-next-line
        this.mouseoutTabEmitter = new EventEmitter();
        // eslint-disable-next-line
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onOpen = new EventEmitter();
        // eslint-disable-next-line
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onClose = new EventEmitter();
        this.isDrawerVisible = false;
        this.isSmallScreen = false;
        this.isFixedDrawerIntern = false;
        this.isFixedHeaderIntern = false;
        this.isSeamedIntern = false;
        this.selectedIndexIntern = 0;
        this.isNoDrawerIntern = false;
        this.subscriptions = [];
    }
    get isFixedDrawer() {
        return this.isFixedDrawerIntern;
    }
    set isFixedDrawer(value) {
        this.isFixedDrawerIntern = toBoolean(value);
    }
    get isFixedHeader() {
        return this.isFixedHeaderIntern;
    }
    set isFixedHeader(value) {
        this.isFixedHeaderIntern = toBoolean(value);
    }
    get isSeamed() {
        return this.isSeamedIntern;
    }
    set isSeamed(value) {
        this.isSeamedIntern = toBoolean(value);
    }
    get selectedIndex() {
        return this.selectedIndexIntern ? this.selectedIndexIntern : 0;
    }
    set selectedIndex(value) {
        this.selectedIndexIntern = toNumber(value);
    }
    get isNoDrawer() {
        return this.isNoDrawerIntern;
    }
    set isNoDrawer(value) {
        this.isNoDrawerIntern = toBoolean(value);
    }
    ngAfterContentInit() {
        this.validateMode();
        if (this.header && this.content && this.content.tabs) {
            this.header.tabs = this.content.tabs;
            this.updateSelectedTabIndex();
        }
        if (this.header && this.header.tabs) {
            this.subscriptions.push(this.layoutMediatorService
                .onTabMouseOut()
                .subscribe((tab) => {
                this.onTabMouseout(tab);
            }));
            this.subscriptions.push(this.layoutMediatorService
                .onTabMouseover()
                .subscribe((tab) => {
                this.onTabMouseover(tab);
            }));
            this.subscriptions.push(this.layoutMediatorService
                .onTabSelected()
                .subscribe((tab) => {
                this.tabSelected(tab);
            }));
        }
    }
    ngOnChanges(changes) {
        if (changes["selectedIndex"]) {
            this.updateSelectedTabIndex();
        }
    }
    toggleDrawer() {
        this.isDrawerVisible = !this.isDrawerVisible;
        if (this.drawers && this.drawers.length > 0) {
            this.setDrawerVisible(this.isDrawerVisible);
        }
    }
    closeDrawer() {
        this.isDrawerVisible = false;
        if (this.drawers && this.drawers.length > 0) {
            this.setDrawerVisible(false);
        }
    }
    openDrawer() {
        this.isDrawerVisible = true;
        if (this.drawers && this.drawers.length > 0) {
            this.setDrawerVisible(true);
        }
    }
    obfuscatorKeyDown($event) {
        if ($event.keyCode === ESCAPE) {
            this.toggleDrawer();
        }
    }
    ngOnDestroy() {
        if (this.scrollListener) {
            this.scrollListener();
            this.scrollListener = undefined;
        }
        this.subscriptions.forEach((sub) => sub.unsubscribe());
    }
    closeDrawerOnSmallScreens() {
        if (this.isSmallScreen && this.isDrawerVisible) {
            this.closeDrawer();
        }
    }
    openDrawerOnSmallScreens() {
        if (this.isSmallScreen && !this.isDrawerVisible) {
            this.openDrawer();
        }
    }
    hasDrawer() {
        return !!(this.drawers && this.drawers.length > 0);
    }
    tabSelected(tab) {
        const index = this.header?.tabs.toArray().indexOf(tab);
        if (index !== this.selectedIndex) {
            this.selectedIndex = index;
            this.updateSelectedTabIndex();
            this.selectedTabEmitter.emit({ index: this.selectedIndex });
        }
    }
    onTabMouseover(tab) {
        const index = this.header?.tabs.toArray().indexOf(tab);
        this.mouseoverTabEmitter.emit({ index });
    }
    onTabMouseout(tab) {
        const index = this.header?.tabs.toArray().indexOf(tab);
        this.mouseoutTabEmitter.emit({ index });
    }
    updateSelectedTabIndex() {
        if (this.header && this.header.tabs) {
            this.header.tabs.forEach((tab) => (tab.isActive = false));
            if (this.header.tabs.toArray().length > 0 &&
                this.selectedIndex < this.header.tabs.toArray().length &&
                this.selectedIndex !== -1) {
                this.header.tabs.toArray()[this.selectedIndex].isActive = true;
            }
        }
    }
    validateMode() {
        if (this.mode === "") {
            this.mode = STANDARD;
        }
        if ([STANDARD, WATERFALL, SCROLL].indexOf(this.mode) === -1) {
            throw new MdLUnsupportedLayoutTypeError(this.mode);
        }
        if (this.header) {
            // inform the header about the mode
            this.header.mode = this.mode;
            this.header.isSeamed = this.isSeamed;
        }
        if (this.content) {
            this.scrollListener = this.renderer.listen(this.content.el, "scroll", () => {
                this.onScroll(this.content?.el.scrollTop);
                return true;
            });
            this.screenSizeService.sizes().subscribe((isSmall) => {
                this.onQueryChange(isSmall);
            });
        }
    }
    onScroll(scrollTop) {
        if (this.mode !== WATERFALL) {
            return;
        }
        if (this.header?.isAnimating) {
            return;
        }
        const headerVisible = !this.isSmallScreen || this.isFixedHeader;
        if (this.header) {
            if (scrollTop != null && scrollTop > 0 && !this.header.isCompact) {
                this.header.isCompact = true;
                if (headerVisible) {
                    this.header.isAnimating = true;
                }
            }
            else if (scrollTop != null && scrollTop <= 0 && this.header.isCompact) {
                this.header.isCompact = false;
                if (headerVisible) {
                    this.header.isAnimating = true;
                }
            }
        }
    }
    onQueryChange(isSmall) {
        if (isSmall) {
            this.isSmallScreen = true;
        }
        else {
            this.isSmallScreen = false;
            this.closeDrawer();
        }
    }
    setDrawerVisible(visible) {
        this.drawers.first.isDrawerVisible = visible;
        if (this.drawers.first.isDrawerVisible) {
            this.onOpen.emit();
        }
        else {
            this.onClose.emit();
        }
    }
}
MdlLayoutComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlLayoutComponent, deps: [{ token: i0.Renderer2 }, { token: i1.EventManager }, { token: i0.ElementRef }, { token: MdlScreenSizeService }, { token: i2.MdlLayoutMediatorService }], target: i0.ɵɵFactoryTarget.Component });
MdlLayoutComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlLayoutComponent, selector: "mdl-layout", inputs: { mode: ["mdl-layout-mode", "mode"], isFixedDrawer: ["mdl-layout-fixed-drawer", "isFixedDrawer"], isFixedHeader: ["mdl-layout-fixed-header", "isFixedHeader"], isSeamed: ["mdl-layout-header-seamed", "isSeamed"], selectedIndex: ["mdl-layout-tab-active-index", "selectedIndex"], isNoDrawer: ["mdl-layout-no-drawer-button", "isNoDrawer"] }, outputs: { selectedTabEmitter: "mdl-layout-tab-active-changed", mouseoverTabEmitter: "mdl-layout-tab-mouseover", mouseoutTabEmitter: "mdl-layout-tab-mouseout", onOpen: "open", onClose: "close" }, queries: [{ propertyName: "header", first: true, predicate: MdlLayoutHeaderComponent, descendants: true }, { propertyName: "content", first: true, predicate: MdlLayoutContentComponent, descendants: true, static: true }, { propertyName: "drawers", predicate: MdlLayoutDrawerComponent }], exportAs: ["mdlLayout"], usesOnChanges: true, ngImport: i0, template: `
    <div
      class="mdl-layout__container"
      [ngClass]="{ 'has-scrolling-header': mode === 'scroll' }"
    >
      <div
        class="mdl-layout is-upgraded"
        [ngClass]="{
          'is-small-screen': isSmallScreen,
          'mdl-layout--fixed-drawer': isFixedDrawer,
          'mdl-layout--fixed-header': isFixedHeader,
          'mdl-layout--fixed-tabs': 'tabs.toArray().length > 0'
        }"
      >
        <ng-content select="mdl-layout-header"></ng-content>
        <ng-content select="mdl-layout-drawer"></ng-content>
        <div
          *ngIf="drawers.length > 0 && isNoDrawer === false"
          class="mdl-layout__drawer-button"
          (click)="toggleDrawer()"
        >
          <mdl-icon>&#xE5D2;</mdl-icon>
        </div>
        <ng-content select="mdl-layout-content"></ng-content>
        <div
          class="mdl-layout__obfuscator"
          [ngClass]="{ 'is-visible': isDrawerVisible }"
          (click)="toggleDrawer()"
          (keydown)="obfuscatorKeyDown($event)"
        ></div>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "component", type: i3.MdlIconComponent, selector: "mdl-icon" }, { kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlLayoutComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mdl-layout",
                    template: `
    <div
      class="mdl-layout__container"
      [ngClass]="{ 'has-scrolling-header': mode === 'scroll' }"
    >
      <div
        class="mdl-layout is-upgraded"
        [ngClass]="{
          'is-small-screen': isSmallScreen,
          'mdl-layout--fixed-drawer': isFixedDrawer,
          'mdl-layout--fixed-header': isFixedHeader,
          'mdl-layout--fixed-tabs': 'tabs.toArray().length > 0'
        }"
      >
        <ng-content select="mdl-layout-header"></ng-content>
        <ng-content select="mdl-layout-drawer"></ng-content>
        <div
          *ngIf="drawers.length > 0 && isNoDrawer === false"
          class="mdl-layout__drawer-button"
          (click)="toggleDrawer()"
        >
          <mdl-icon>&#xE5D2;</mdl-icon>
        </div>
        <ng-content select="mdl-layout-content"></ng-content>
        <div
          class="mdl-layout__obfuscator"
          [ngClass]="{ 'is-visible': isDrawerVisible }"
          (click)="toggleDrawer()"
          (keydown)="obfuscatorKeyDown($event)"
        ></div>
      </div>
    </div>
  `,
                    exportAs: "mdlLayout",
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.EventManager }, { type: i0.ElementRef }, { type: MdlScreenSizeService }, { type: i2.MdlLayoutMediatorService }]; }, propDecorators: { header: [{
                type: ContentChild,
                args: [MdlLayoutHeaderComponent]
            }], drawers: [{
                type: ContentChildren,
                args: [MdlLayoutDrawerComponent, { descendants: false }]
            }], content: [{
                type: ContentChild,
                args: [MdlLayoutContentComponent, { static: true }]
            }], mode: [{
                type: Input,
                args: ["mdl-layout-mode"]
            }], selectedTabEmitter: [{
                type: Output,
                args: ["mdl-layout-tab-active-changed"]
            }], mouseoverTabEmitter: [{
                type: Output,
                args: ["mdl-layout-tab-mouseover"]
            }], mouseoutTabEmitter: [{
                type: Output,
                args: ["mdl-layout-tab-mouseout"]
            }], 
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        onOpen: [{
                type: Output,
                args: ["open"]
            }], 
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        onClose: [{
                type: Output,
                args: ["close"]
            }], isFixedDrawer: [{
                type: Input,
                args: ["mdl-layout-fixed-drawer"]
            }], isFixedHeader: [{
                type: Input,
                args: ["mdl-layout-fixed-header"]
            }], isSeamed: [{
                type: Input,
                args: ["mdl-layout-header-seamed"]
            }], selectedIndex: [{
                type: Input,
                args: ["mdl-layout-tab-active-index"]
            }], isNoDrawer: [{
                type: Input,
                args: ["mdl-layout-no-drawer-button"]
            }] } });
//# sourceMappingURL=data:application/json;base64,
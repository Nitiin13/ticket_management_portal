import { Directive, ElementRef, HostBinding, Input, Renderer2, } from "@angular/core";
import * as i0 from "@angular/core";
const DATA_BADE_ATTR = "data-badge";
export class MdlBadgeDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.isBadge = true;
        this.el = elementRef.nativeElement;
    }
    ngOnChanges() {
        if (this.mdlBadgeContent === null ||
            typeof this.mdlBadgeContent === "undefined") {
            this.renderer.removeAttribute(this.el, DATA_BADE_ATTR);
            return;
        }
        this.renderer.setAttribute(this.el, DATA_BADE_ATTR, String(this.mdlBadgeContent));
    }
}
MdlBadgeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlBadgeDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
MdlBadgeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlBadgeDirective, selector: "[mdl-badge]", inputs: { mdlBadgeContent: ["mdl-badge", "mdlBadgeContent"] }, host: { properties: { "class.mdl-badge": "this.isBadge" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlBadgeDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "[mdl-badge]",
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { mdlBadgeContent: [{
                type: Input,
                args: ["mdl-badge"]
            }], isBadge: [{
                type: HostBinding,
                args: ["class.mdl-badge"]
            }] } });
export class MdlBadgeOverlapDirective {
    constructor() {
        this.isOverlapping = true;
    }
}
MdlBadgeOverlapDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlBadgeOverlapDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MdlBadgeOverlapDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlBadgeOverlapDirective, selector: "[mdl-badge-overlap]", host: { properties: { "class.mdl-badge--overlap": "this.isOverlapping" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlBadgeOverlapDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "[mdl-badge-overlap]",
                }]
        }], propDecorators: { isOverlapping: [{
                type: HostBinding,
                args: ["class.mdl-badge--overlap"]
            }] } });
export class MdlBadgeNoBackgroundDirective {
    constructor() {
        this.isNoBackground = true;
    }
}
MdlBadgeNoBackgroundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlBadgeNoBackgroundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MdlBadgeNoBackgroundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlBadgeNoBackgroundDirective, selector: "[mdl-badge-no-background]", host: { properties: { "class.mdl-badge--no-background": "this.isNoBackground" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlBadgeNoBackgroundDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: "[mdl-badge-no-background]",
                }]
        }], propDecorators: { isNoBackground: [{
                type: HostBinding,
                args: ["class.mdl-badge--no-background"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWJhZGdlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2xpYi9iYWRnZS9tZGwtYmFkZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxLQUFLLEVBRUwsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDOztBQUV2QixNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUM7QUFNcEMsTUFBTSxPQUFPLGlCQUFpQjtJQU81QixZQUFvQixVQUFzQixFQUFVLFFBQW1CO1FBQW5ELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnZDLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFLN0MsSUFBSSxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQ0UsSUFBSSxDQUFDLGVBQWUsS0FBSyxJQUFJO1lBQzdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQzNDO1lBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUN2RCxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FDeEIsSUFBSSxDQUFDLEVBQUUsRUFDUCxjQUFjLEVBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FDN0IsQ0FBQztJQUNKLENBQUM7OzhHQXhCVSxpQkFBaUI7a0dBQWpCLGlCQUFpQjsyRkFBakIsaUJBQWlCO2tCQUo3QixTQUFTO21CQUFDO29CQUNULDJCQUEyQjtvQkFDM0IsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCO3lIQUU0QixlQUFlO3NCQUF6QyxLQUFLO3VCQUFDLFdBQVc7Z0JBRWMsT0FBTztzQkFBdEMsV0FBVzt1QkFBQyxpQkFBaUI7O0FBNEJoQyxNQUFNLE9BQU8sd0JBQXdCO0lBSnJDO1FBSzJDLGtCQUFhLEdBQUcsSUFBSSxDQUFDO0tBQy9EOztxSEFGWSx3QkFBd0I7eUdBQXhCLHdCQUF3QjsyRkFBeEIsd0JBQXdCO2tCQUpwQyxTQUFTO21CQUFDO29CQUNULDJCQUEyQjtvQkFDM0IsUUFBUSxFQUFFLHFCQUFxQjtpQkFDaEM7OEJBRTBDLGFBQWE7c0JBQXJELFdBQVc7dUJBQUMsMEJBQTBCOztBQU96QyxNQUFNLE9BQU8sNkJBQTZCO0lBSjFDO1FBS2lELG1CQUFjLEdBQUcsSUFBSSxDQUFDO0tBQ3RFOzswSEFGWSw2QkFBNkI7OEdBQTdCLDZCQUE2QjsyRkFBN0IsNkJBQTZCO2tCQUp6QyxTQUFTO21CQUFDO29CQUNULDJCQUEyQjtvQkFDM0IsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7OEJBRWdELGNBQWM7c0JBQTVELFdBQVc7dUJBQUMsZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgUmVuZGVyZXIyLFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5jb25zdCBEQVRBX0JBREVfQVRUUiA9IFwiZGF0YS1iYWRnZVwiO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHNlbGVjdG9yOiBcIlttZGwtYmFkZ2VdXCIsXG59KVxuZXhwb3J0IGNsYXNzIE1kbEJhZGdlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KFwibWRsLWJhZGdlXCIpIHB1YmxpYyBtZGxCYWRnZUNvbnRlbnQ6IG51bWJlciB8IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtYmFkZ2VcIikgaXNCYWRnZSA9IHRydWU7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICB0aGlzLmVsID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgcHVibGljIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIHRoaXMubWRsQmFkZ2VDb250ZW50ID09PSBudWxsIHx8XG4gICAgICB0eXBlb2YgdGhpcy5tZGxCYWRnZUNvbnRlbnQgPT09IFwidW5kZWZpbmVkXCJcbiAgICApIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWwsIERBVEFfQkFERV9BVFRSKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLmVsLFxuICAgICAgREFUQV9CQURFX0FUVFIsXG4gICAgICBTdHJpbmcodGhpcy5tZGxCYWRnZUNvbnRlbnQpXG4gICAgKTtcbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHNlbGVjdG9yOiBcIlttZGwtYmFkZ2Utb3ZlcmxhcF1cIixcbn0pXG5leHBvcnQgY2xhc3MgTWRsQmFkZ2VPdmVybGFwRGlyZWN0aXZlIHtcbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MubWRsLWJhZGdlLS1vdmVybGFwXCIpIGlzT3ZlcmxhcHBpbmcgPSB0cnVlO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIHNlbGVjdG9yOiBcIlttZGwtYmFkZ2Utbm8tYmFja2dyb3VuZF1cIixcbn0pXG5leHBvcnQgY2xhc3MgTWRsQmFkZ2VOb0JhY2tncm91bmREaXJlY3RpdmUge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtYmFkZ2UtLW5vLWJhY2tncm91bmRcIikgaXNOb0JhY2tncm91bmQgPSB0cnVlO1xufVxuIl19
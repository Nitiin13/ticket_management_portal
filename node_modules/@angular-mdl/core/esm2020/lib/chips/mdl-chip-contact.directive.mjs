import { Directive, HostBinding, Inject, Optional, } from "@angular/core";
import { MdlChipComponent } from "./mdl-chip.component";
import { MdlStructureError } from "../common/mdl-error";
import * as i0 from "@angular/core";
import * as i1 from "./mdl-chip.component";
export class MdlChipContactDirective {
    constructor(mdlChipComponent) {
        this.mdlChipComponent = mdlChipComponent;
        this.isChipContact = true;
    }
    ngOnInit() {
        if (!this.mdlChipComponent) {
            throw new MdlStructureError("mdl-chip-contact", "mdl-chip");
        }
        this.mdlChipComponent.isChipContact = true;
    }
}
MdlChipContactDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlChipContactDirective, deps: [{ token: MdlChipComponent, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
MdlChipContactDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: MdlChipContactDirective, selector: "[mdl-chip-contact]", host: { properties: { "class.mdl-chip__contact": "this.isChipContact" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlChipContactDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line
                    selector: '[mdl-chip-contact]'
                }]
        }], ctorParameters: function () { return [{ type: i1.MdlChipComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MdlChipComponent]
                }] }]; }, propDecorators: { isChipContact: [{
                type: HostBinding,
                args: ["class.mdl-chip__contact"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWRsLWNoaXAtY29udGFjdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9saWIvY2hpcHMvbWRsLWNoaXAtY29udGFjdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxXQUFXLEVBQ1gsTUFBTSxFQUVOLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7O0FBTXhELE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFHVSxnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUxKLGtCQUFhLEdBQUcsSUFBSSxDQUFDO0lBTTFELENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUMxQixNQUFNLElBQUksaUJBQWlCLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDN0Q7UUFDQSxJQUFJLENBQUMsZ0JBQXFDLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUNuRSxDQUFDOztvSEFkVSx1QkFBdUIsa0JBS3hCLGdCQUFnQjt3R0FMZix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFKbkMsU0FBUzttQkFBQztvQkFDVCwyQkFBMkI7b0JBQzNCLFFBQVEsRUFBRSxvQkFBb0I7aUJBQy9COzswQkFLSSxRQUFROzswQkFDUixNQUFNOzJCQUFDLGdCQUFnQjs0Q0FKYyxhQUFhO3NCQUFwRCxXQUFXO3VCQUFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSG9zdEJpbmRpbmcsXG4gIEluamVjdCxcbiAgT25Jbml0LFxuICBPcHRpb25hbCxcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE1kbENoaXBDb21wb25lbnQgfSBmcm9tIFwiLi9tZGwtY2hpcC5jb21wb25lbnRcIjtcbmltcG9ydCB7IE1kbFN0cnVjdHVyZUVycm9yIH0gZnJvbSBcIi4uL2NvbW1vbi9tZGwtZXJyb3JcIjtcblxuQERpcmVjdGl2ZSh7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBzZWxlY3RvcjogJ1ttZGwtY2hpcC1jb250YWN0XSdcbn0pXG5leHBvcnQgY2xhc3MgTWRsQ2hpcENvbnRhY3REaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5tZGwtY2hpcF9fY29udGFjdFwiKSBpc0NoaXBDb250YWN0ID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoTWRsQ2hpcENvbXBvbmVudClcbiAgICBwcml2YXRlIG1kbENoaXBDb21wb25lbnQ6IE1kbENoaXBDb21wb25lbnRcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tZGxDaGlwQ29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBuZXcgTWRsU3RydWN0dXJlRXJyb3IoXCJtZGwtY2hpcC1jb250YWN0XCIsIFwibWRsLWNoaXBcIik7XG4gICAgfVxuICAgICh0aGlzLm1kbENoaXBDb21wb25lbnQgYXMgTWRsQ2hpcENvbXBvbmVudCkuaXNDaGlwQ29udGFjdCA9IHRydWU7XG4gIH1cbn1cbiJdfQ==
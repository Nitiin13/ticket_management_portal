import { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Inject, InjectionToken, Input, Optional, Output, Renderer2, ViewChild, ViewEncapsulation, } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { toBoolean } from "../common/boolean-property";
import { toNumber } from "../common/number.property";
import { noop } from "../common/noop";
import * as i0 from "@angular/core";
import * as i1 from "../icon/mdl-icon.component";
import * as i2 from "../button/mdl-button.component";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
export const DISABLE_NATIVE_VALIDITY_CHECKING = new InjectionToken("disableNativeValidityChecking");
let nextId = 0;
const IS_FOCUSED = "is-focused";
const IS_DISABLED = "is-disabled";
const IS_INVALID = "is-invalid";
const IS_DIRTY = "is-dirty";
/* eslint-disable  @angular-eslint/no-conflicting-lifecycle */
export class MdlTextFieldComponent {
    constructor(renderer, elmRef, nativeCheckGlobalDisabled) {
        this.renderer = renderer;
        this.elmRef = elmRef;
        this.nativeCheckGlobalDisabled = nativeCheckGlobalDisabled;
        // eslint-disable-next-line
        this.blurEmitter = new EventEmitter();
        // eslint-disable-next-line
        this.focusEmitter = new EventEmitter();
        // eslint-disable-next-line
        this.keyupEmitter = new EventEmitter();
        this.type = "text";
        this.id = `mdl-textfield-${nextId++}`;
        this.tabindex = null;
        this.maxlength = null;
        this.isTextfield = true;
        this.isUpgraded = true;
        this.valueIntern = null;
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.disabledIntern = false;
        this.readonlyIntern = false;
        this.requiredIntern = false;
        this.autofocusIntern = false;
        this.isFloatingLabelIntern = false;
        this.rowsIntern = null;
        this.maxrowsIntern = -1;
        // @experimental
        this.disableNativeValidityCheckingIntern = false;
        this.el = elmRef.nativeElement;
    }
    get value() {
        return this.valueIntern;
    }
    set value(v) {
        this.valueIntern =
            this.type === "number" ? (v === "" ? null : parseFloat(v)) : v;
        this.onChangeCallback(this.value);
    }
    get disabled() {
        return this.disabledIntern;
    }
    set disabled(value) {
        this.disabledIntern = toBoolean(value);
    }
    get readonly() {
        return this.readonlyIntern;
    }
    set readonly(value) {
        this.readonlyIntern = toBoolean(value);
    }
    get required() {
        return this.requiredIntern;
    }
    set required(value) {
        this.requiredIntern = toBoolean(value);
    }
    get autofocus() {
        return this.autofocusIntern;
    }
    set autofocus(value) {
        this.autofocusIntern = toBoolean(value);
    }
    get isFloatingLabel() {
        return this.isFloatingLabelIntern;
    }
    set isFloatingLabel(value) {
        this.isFloatingLabelIntern = toBoolean(value);
    }
    get rows() {
        return this.rowsIntern;
    }
    set rows(value) {
        this.rowsIntern = toNumber(value);
    }
    get maxrows() {
        return this.maxrowsIntern;
    }
    set maxrows(value) {
        this.maxrowsIntern = toNumber(value) ?? -1;
    }
    get disableNativeValidityChecking() {
        return this.disableNativeValidityCheckingIntern;
    }
    set disableNativeValidityChecking(value) {
        this.disableNativeValidityCheckingIntern = toBoolean(value);
    }
    writeValue(value) {
        this.valueIntern = value;
        this.checkDirty();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnChanges() {
        this.checkDisabled();
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngDoCheck() {
        this.checkValidity();
        this.checkDirty();
    }
    setFocus() {
        if (!this.inputEl) {
            return;
        }
        this.inputEl.nativeElement.dispatchEvent(new Event("focus"));
    }
    keydownTextarea($event) {
        const currentRowCount = this.inputEl?.nativeElement.value.split("\n").length;
        // eslint-disable-next-line
        if ($event.keyCode === 13) {
            if (currentRowCount >= this.maxrows && this.maxrows !== -1) {
                $event.preventDefault();
            }
        }
    }
    // model value.
    triggerChange(event) {
        this.value = event.target.value;
        this.onTouchedCallback();
    }
    onFocus(event) {
        this.renderer.addClass(this.el, IS_FOCUSED);
        this.focusEmitter.emit(event);
    }
    onBlur(event) {
        this.renderer.removeClass(this.el, IS_FOCUSED);
        this.onTouchedCallback();
        this.blurEmitter.emit(event);
    }
    onKeyup(event) {
        this.keyupEmitter.emit(event);
    }
    checkDisabled() {
        if (this.disabled) {
            this.renderer.addClass(this.el, IS_DISABLED);
        }
        else {
            this.renderer.removeClass(this.el, IS_DISABLED);
        }
    }
    checkValidity() {
        // check the global setting - if globally disabled do no check
        if (this.nativeCheckGlobalDisabled === true) {
            return;
        }
        // check local setting - if locally disabled do no check
        if (this.disableNativeValidityChecking) {
            return;
        }
        if (this.inputEl && this.inputEl.nativeElement.validity) {
            if (!this.inputEl.nativeElement.validity.valid) {
                this.renderer.addClass(this.el, IS_INVALID);
            }
            else {
                this.renderer.removeClass(this.el, IS_INVALID);
            }
        }
    }
    checkDirty() {
        const dirty = this.inputEl &&
            this.inputEl.nativeElement.value &&
            this.inputEl.nativeElement.value.length > 0;
        if (dirty) {
            this.renderer.addClass(this.el, IS_DIRTY);
        }
        else {
            this.renderer.removeClass(this.el, IS_DIRTY);
        }
    }
}
MdlTextFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTextFieldComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: DISABLE_NATIVE_VALIDITY_CHECKING, optional: true }], target: i0.ɵɵFactoryTarget.Component });
MdlTextFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MdlTextFieldComponent, selector: "mdl-textfield", inputs: { type: "type", label: "label", pattern: "pattern", min: "min", max: "max", step: "step", name: "name", id: "id", errorMessage: ["error-msg", "errorMessage"], placeholder: "placeholder", autocomplete: "autocomplete", icon: "icon", tabindex: "tabindex", maxlength: "maxlength", value: "value", disabled: "disabled", readonly: "readonly", required: "required", autofocus: "autofocus", isFloatingLabel: ["floating-label", "isFloatingLabel"], rows: "rows", maxrows: "maxrows", disableNativeValidityChecking: "disableNativeValidityChecking" }, outputs: { blurEmitter: "blur", focusEmitter: "focus", keyupEmitter: "keyup" }, host: { properties: { "class.has-placeholder": "this.placeholder", "class.mdl-textfield--expandable": "this.icon", "class.mdl-textfield": "this.isTextfield", "class.is-upgraded": "this.isUpgraded", "class.mdl-textfield--floating-label": "this.isFloatingLabel" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MdlTextFieldComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["input"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div *ngIf="!icon">
      <textarea
        *ngIf="rows"
        #input
        [rows]="rows"
        class="mdl-textfield__input"
        type="text"
        [attr.name]="name"
        [id]="id"
        [placeholder]="placeholder ? placeholder : ''"
        (focus)="onFocus($event)"
        (blur)="onBlur($event)"
        (keydown)="keydownTextarea($event)"
        (keyup)="onKeyup($event)"
        [(ngModel)]="value"
        [disabled]="disabled"
        [required]="required"
        [autofocus]="autofocus"
        [readonly]="readonly"
        [maxlength]="maxlength"
      ></textarea>
      <input
        *ngIf="!rows"
        #input
        class="mdl-textfield__input"
        [type]="type"
        [attr.name]="name"
        [id]="id"
        [pattern]="pattern ? pattern : '.*'"
        [attr.min]="min"
        [attr.max]="max"
        [attr.step]="step"
        [placeholder]="placeholder ? placeholder : ''"
        [autocomplete]="autocomplete ? autocomplete : ''"
        (focus)="onFocus($event)"
        (blur)="onBlur($event)"
        (keyup)="onKeyup($event)"
        [(ngModel)]="value"
        [disabled]="disabled"
        [required]="required"
        [autofocus]="autofocus"
        [readonly]="readonly"
        [attr.tabindex]="tabindex"
        [maxlength]="maxlength"
      />
      <label class="mdl-textfield__label" [attr.for]="id">{{ label }}</label>
      <span class="mdl-textfield__error">{{ errorMessage }}</span>
    </div>
    <div *ngIf="icon">
      <button mdl-button mdl-button-type="icon" (click)="setFocus()">
        <mdl-icon>{{ icon }}</mdl-icon>
      </button>
      <div class="mdl-textfield__expandable-holder">
        <input
          #input
          class="mdl-textfield__input"
          [type]="type"
          [attr.name]="name"
          [id]="id"
          [pattern]="pattern ? pattern : '.*'"
          [attr.min]="min"
          [attr.max]="max"
          [attr.step]="step"
          [placeholder]="placeholder ? placeholder : ''"
          [autocomplete]="autocomplete ? autocomplete : ''"
          (focus)="onFocus($event)"
          (blur)="onBlur($event)"
          (keyup)="onKeyup($event)"
          [(ngModel)]="value"
          [disabled]="disabled"
          [required]="required"
          [autofocus]="autofocus"
          [readonly]="readonly"
          [attr.tabindex]="tabindex"
          [maxlength]="maxlength"
        />
        <label class="mdl-textfield__label" [attr.for]="id">{{ label }}</label>
        <span class="mdl-textfield__error">{{ errorMessage }}</span>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "component", type: i1.MdlIconComponent, selector: "mdl-icon" }, { kind: "component", type: i2.MdlButtonComponent, selector: "mdl-button, button[mdl-button], a[mdl-button]", inputs: ["mdl-button-type", "mdl-colored", "disabled"], exportAs: ["mdlButton"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlTextFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "mdl-textfield",
                    template: `
    <div *ngIf="!icon">
      <textarea
        *ngIf="rows"
        #input
        [rows]="rows"
        class="mdl-textfield__input"
        type="text"
        [attr.name]="name"
        [id]="id"
        [placeholder]="placeholder ? placeholder : ''"
        (focus)="onFocus($event)"
        (blur)="onBlur($event)"
        (keydown)="keydownTextarea($event)"
        (keyup)="onKeyup($event)"
        [(ngModel)]="value"
        [disabled]="disabled"
        [required]="required"
        [autofocus]="autofocus"
        [readonly]="readonly"
        [maxlength]="maxlength"
      ></textarea>
      <input
        *ngIf="!rows"
        #input
        class="mdl-textfield__input"
        [type]="type"
        [attr.name]="name"
        [id]="id"
        [pattern]="pattern ? pattern : '.*'"
        [attr.min]="min"
        [attr.max]="max"
        [attr.step]="step"
        [placeholder]="placeholder ? placeholder : ''"
        [autocomplete]="autocomplete ? autocomplete : ''"
        (focus)="onFocus($event)"
        (blur)="onBlur($event)"
        (keyup)="onKeyup($event)"
        [(ngModel)]="value"
        [disabled]="disabled"
        [required]="required"
        [autofocus]="autofocus"
        [readonly]="readonly"
        [attr.tabindex]="tabindex"
        [maxlength]="maxlength"
      />
      <label class="mdl-textfield__label" [attr.for]="id">{{ label }}</label>
      <span class="mdl-textfield__error">{{ errorMessage }}</span>
    </div>
    <div *ngIf="icon">
      <button mdl-button mdl-button-type="icon" (click)="setFocus()">
        <mdl-icon>{{ icon }}</mdl-icon>
      </button>
      <div class="mdl-textfield__expandable-holder">
        <input
          #input
          class="mdl-textfield__input"
          [type]="type"
          [attr.name]="name"
          [id]="id"
          [pattern]="pattern ? pattern : '.*'"
          [attr.min]="min"
          [attr.max]="max"
          [attr.step]="step"
          [placeholder]="placeholder ? placeholder : ''"
          [autocomplete]="autocomplete ? autocomplete : ''"
          (focus)="onFocus($event)"
          (blur)="onBlur($event)"
          (keyup)="onKeyup($event)"
          [(ngModel)]="value"
          [disabled]="disabled"
          [required]="required"
          [autofocus]="autofocus"
          [readonly]="readonly"
          [attr.tabindex]="tabindex"
          [maxlength]="maxlength"
        />
        <label class="mdl-textfield__label" [attr.for]="id">{{ label }}</label>
        <span class="mdl-textfield__error">{{ errorMessage }}</span>
      </div>
    </div>
  `,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MdlTextFieldComponent),
                            multi: true,
                        },
                    ],
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DISABLE_NATIVE_VALIDITY_CHECKING]
                }] }]; }, propDecorators: { blurEmitter: [{
                type: Output,
                args: ["blur"]
            }], focusEmitter: [{
                type: Output,
                args: ["focus"]
            }], keyupEmitter: [{
                type: Output,
                args: ["keyup"]
            }], inputEl: [{
                type: ViewChild,
                args: ["input"]
            }], type: [{
                type: Input
            }], label: [{
                type: Input
            }], pattern: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], step: [{
                type: Input
            }], name: [{
                type: Input
            }], id: [{
                type: Input
            }], errorMessage: [{
                type: Input,
                args: ["error-msg"]
            }], placeholder: [{
                type: HostBinding,
                args: ["class.has-placeholder"]
            }, {
                type: Input
            }], autocomplete: [{
                type: Input
            }], icon: [{
                type: HostBinding,
                args: ["class.mdl-textfield--expandable"]
            }, {
                type: Input
            }], tabindex: [{
                type: Input
            }], maxlength: [{
                type: Input
            }], isTextfield: [{
                type: HostBinding,
                args: ["class.mdl-textfield"]
            }], isUpgraded: [{
                type: HostBinding,
                args: ["class.is-upgraded"]
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], required: [{
                type: Input
            }], autofocus: [{
                type: Input
            }], isFloatingLabel: [{
                type: HostBinding,
                args: ["class.mdl-textfield--floating-label"]
            }, {
                type: Input,
                args: ["floating-label"]
            }], rows: [{
                type: Input
            }], maxrows: [{
                type: Input
            }], disableNativeValidityChecking: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
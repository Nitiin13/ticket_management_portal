import * as i0 from '@angular/core';
import { InjectionToken, Component, ViewEncapsulation, Inject, ViewChild, HostListener, Injectable, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import * as i1 from '@angular-mdl/core';
import { MdlButtonModule, MdlIconModule, MdlRippleModule, MdlDialogModule, MdlDialogOutletModule } from '@angular-mdl/core';
import * as momentNs from 'moment';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

// see https://github.com/ng-packagr/ng-packagr/issues/217
const moment = momentNs;
const CURRENT_DATE = new InjectionToken("current-date");
const DATEPICKER_CONFIG = new InjectionToken("datepicker-options");
class DatePickerDialogComponent {
    constructor(dialog, initialDate, options) {
        this.dialog = dialog;
        this.initialDate = initialDate;
        this.options = options;
        this.prevEnabled = true;
        this.nextEnabled = true;
        this.monthGridDays = [];
        this.mDate = moment(initialDate || new Date());
        this.pmCurrentMonth = moment(initialDate || new Date());
        this.mCurrentMonth = this.mDate.clone();
        const startOfWeek = moment().startOf("week");
        const endOfWeek = moment().endOf("week");
        this.monthGridWeekDays = [];
        let day = startOfWeek;
        while (day <= endOfWeek) {
            this.monthGridWeekDays.push(moment.weekdaysMin(day.day()));
            day = day.clone().add(1, "d");
        }
        this.okLabel = options.okLabel || "Ok";
        this.cancelLabel = options.cancelLabel || "Cancel";
        dialog.onVisible().subscribe(() => {
            this.okButton?.elementRef.nativeElement.focus();
        });
    }
    get mCurrentMonth() {
        return this.pmCurrentMonth;
    }
    set mCurrentMonth(m) {
        this.pmCurrentMonth = m;
        this.calculateMonthGrid();
    }
    onEsc() {
        this.dialog.hide(this.initialDate);
    }
    onOk() {
        this.dialog.hide(this.mDate.toDate());
    }
    onCancel() {
        this.dialog.hide(this.initialDate);
    }
    prevMonth() {
        this.mCurrentMonth = this.mCurrentMonth.subtract(1, "months");
    }
    nextMonth() {
        this.mCurrentMonth = this.mCurrentMonth.add(1, "months");
    }
    isActualDate(day) {
        return this.mDate.isSame(day, "day");
    }
    setCurrentDay(day) {
        this.mDate = day;
    }
    calculateMonthGrid() {
        const startDateOfMonth = this.mCurrentMonth
            .clone()
            .startOf("month")
            .clone();
        const startWeek = startDateOfMonth.week();
        const endWeek = this.mCurrentMonth.clone().endOf("month").week();
        // caveat year switch
        // 52 - 5
        // 48 - 1
        // console.log(startWeek, endWeek);
        this.monthGridDays = [];
        let week = startWeek;
        this.monthGridDays.push(this.createMonthRow(startDateOfMonth, week));
        do {
            const firstDayInWeek = startDateOfMonth.add(1, "week");
            week = firstDayInWeek.week();
            this.monthGridDays.push(this.createMonthRow(firstDayInWeek.clone(), week));
        } while (week !== endWeek);
    }
    createMonthRow(mDate, week) {
        const startWeek = mDate.week(week).startOf("week");
        return {
            week,
            days: Array(7)
                .fill(0)
                .map((n, i) => {
                const mDay = startWeek.clone().add(i, "day");
                return {
                    day: mDay,
                    isCurrentMonth: this.isCurrentMonth(mDay),
                };
            }),
        };
    }
    isCurrentMonth(day) {
        return this.mCurrentMonth.isSame(day, "month");
    }
}
DatePickerDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: DatePickerDialogComponent, deps: [{ token: i1.MdlDialogReference }, { token: CURRENT_DATE }, { token: DATEPICKER_CONFIG }], target: i0.ɵɵFactoryTarget.Component });
DatePickerDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: DatePickerDialogComponent, selector: "datepicker", host: { listeners: { "keydown.esc": "onEsc()" } }, viewQueries: [{ propertyName: "okButton", first: true, predicate: ["okButton"], descendants: true }], ngImport: i0, template: "<div class=\"mdl-datepicker-header\">\n  <div class=\"mdl-datepicker-header-year\">{{mDate.format('YYYY')}}</div>\n  <h3 class=\"mdl-datepicker-header-day-month\">{{mDate.format('ddd, MMM DD')}}</h3>\n</div>\n\n<div class=\"mdl-dialog__content\">\n  <div class=\"mdl-datepicker-month-navigation-buttons\">\n    <button (click)=\"prevMonth()\" [disabled]=\"!prevEnabled\" class=\"mdl-datepicker-prev-month\" mdl-button\n            mdl-button-type=\"icon\">\n      <mdl-icon>keyboard_arrow_left</mdl-icon>\n    </button>\n    <button (click)=\"nextMonth()\" [disabled]=\"!nextEnabled\" class=\"mdl-datepicker-next-month\" mdl-button\n            mdl-button-type=\"icon\">\n      <mdl-icon>keyboard_arrow_right</mdl-icon>\n    </button>\n  </div>\n  <div class=\"mdl-datepicker-month\">\n    <div class=\"mdl-datepicker-month-title\">{{mCurrentMonth.format('MMMM YYYY')}}</div>\n    <div class=\"mdl-datepicker-weekdays\">\n      <div *ngFor=\"let wd of monthGridWeekDays\" class=\"mdl-datepicker-weekday\">{{wd}}</div>\n    </div>\n    <div class=\"mdl-datepicker-monthgrid\">\n\n      <div *ngFor=\"let week of monthGridDays\" class=\"mdl-datepicker-weekdays\">\n        <div *ngFor=\"let dayInfo of week.days\"\n             class=\"mdl-datepicker-weekday\">\n          <button\n            (click)=\"setCurrentDay(dayInfo.day)\"\n            [disabled]=\"!dayInfo.isCurrentMonth\"\n            [ngClass]=\"{'actual': isActualDate(dayInfo.day)}\"\n            class=\"day\"\n            mdl-button\n            mdl-ripple\n          >{{dayInfo.day.date()}}</button>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</div>\n<div class=\"mdl-dialog__actions\">\n  <button #okButton\n          (click)=\"onOk()\" class=\"close mdl-datepicker-ok-button\"\n          mdl-button\n          mdl-colored=\"primary\"\n          type=\"button\">{{okLabel}}</button>\n  <button\n    (click)=\"onCancel()\" class=\"mdl-datepicker-cancel-button\"\n    mdl-button\n    mdl-colored=\"primary\"\n    type=\"button\">{{cancelLabel}}</button>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i1.MdlButtonComponent, selector: "mdl-button, button[mdl-button], a[mdl-button]", inputs: ["mdl-button-type", "mdl-colored", "disabled"], exportAs: ["mdlButton"] }, { kind: "component", type: i1.MdlIconComponent, selector: "mdl-icon" }, { kind: "directive", type: i1.MdlButtonRippleDirective, selector: "mdl-button[mdl-ripple], button[mdl-ripple]", inputs: ["mdl-ripple"] }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: DatePickerDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: "datepicker", encapsulation: ViewEncapsulation.None, template: "<div class=\"mdl-datepicker-header\">\n  <div class=\"mdl-datepicker-header-year\">{{mDate.format('YYYY')}}</div>\n  <h3 class=\"mdl-datepicker-header-day-month\">{{mDate.format('ddd, MMM DD')}}</h3>\n</div>\n\n<div class=\"mdl-dialog__content\">\n  <div class=\"mdl-datepicker-month-navigation-buttons\">\n    <button (click)=\"prevMonth()\" [disabled]=\"!prevEnabled\" class=\"mdl-datepicker-prev-month\" mdl-button\n            mdl-button-type=\"icon\">\n      <mdl-icon>keyboard_arrow_left</mdl-icon>\n    </button>\n    <button (click)=\"nextMonth()\" [disabled]=\"!nextEnabled\" class=\"mdl-datepicker-next-month\" mdl-button\n            mdl-button-type=\"icon\">\n      <mdl-icon>keyboard_arrow_right</mdl-icon>\n    </button>\n  </div>\n  <div class=\"mdl-datepicker-month\">\n    <div class=\"mdl-datepicker-month-title\">{{mCurrentMonth.format('MMMM YYYY')}}</div>\n    <div class=\"mdl-datepicker-weekdays\">\n      <div *ngFor=\"let wd of monthGridWeekDays\" class=\"mdl-datepicker-weekday\">{{wd}}</div>\n    </div>\n    <div class=\"mdl-datepicker-monthgrid\">\n\n      <div *ngFor=\"let week of monthGridDays\" class=\"mdl-datepicker-weekdays\">\n        <div *ngFor=\"let dayInfo of week.days\"\n             class=\"mdl-datepicker-weekday\">\n          <button\n            (click)=\"setCurrentDay(dayInfo.day)\"\n            [disabled]=\"!dayInfo.isCurrentMonth\"\n            [ngClass]=\"{'actual': isActualDate(dayInfo.day)}\"\n            class=\"day\"\n            mdl-button\n            mdl-ripple\n          >{{dayInfo.day.date()}}</button>\n        </div>\n      </div>\n\n    </div>\n  </div>\n\n</div>\n<div class=\"mdl-dialog__actions\">\n  <button #okButton\n          (click)=\"onOk()\" class=\"close mdl-datepicker-ok-button\"\n          mdl-button\n          mdl-colored=\"primary\"\n          type=\"button\">{{okLabel}}</button>\n  <button\n    (click)=\"onCancel()\" class=\"mdl-datepicker-cancel-button\"\n    mdl-button\n    mdl-colored=\"primary\"\n    type=\"button\">{{cancelLabel}}</button>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MdlDialogReference }, { type: Date, decorators: [{
                    type: Inject,
                    args: [CURRENT_DATE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DATEPICKER_CONFIG]
                }] }]; }, propDecorators: { okButton: [{
                type: ViewChild,
                args: ["okButton"]
            }], onEsc: [{
                type: HostListener,
                args: ["keydown.esc"]
            }] } });

class MdlDatePickerService {
    constructor(dialogService) {
        this.dialogService = dialogService;
    }
    selectDate(currentDate = null, options = {}) {
        const subject = new Subject();
        const pDialog = this.dialogService.showCustomDialog({
            classes: "mdl-datepicker",
            component: DatePickerDialogComponent,
            providers: [
                { provide: CURRENT_DATE, useValue: currentDate },
                { provide: DATEPICKER_CONFIG, useValue: options },
            ],
            isModal: true,
            styles: { width: "320px" },
            openFrom: options.openFrom,
        });
        pDialog.subscribe((dialogReference) => {
            dialogReference.onHide().subscribe((date) => {
                subject.next(date);
                subject.complete();
            });
        });
        return subject.asObservable();
    }
}
MdlDatePickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerService, deps: [{ token: i1.MdlDialogService }], target: i0.ɵɵFactoryTarget.Injectable });
MdlDatePickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MdlDialogService }]; } });

class MdlDatePickerModule {
}
MdlDatePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MdlDatePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerModule, declarations: [DatePickerDialogComponent], imports: [CommonModule,
        MdlButtonModule,
        MdlIconModule,
        MdlRippleModule,
        MdlDialogModule,
        MdlDialogOutletModule], exports: [DatePickerDialogComponent] });
MdlDatePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerModule, providers: [MdlDatePickerService], imports: [CommonModule,
        MdlButtonModule,
        MdlIconModule,
        MdlRippleModule,
        MdlDialogModule,
        MdlDialogOutletModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DatePickerDialogComponent],
                    imports: [
                        CommonModule,
                        MdlButtonModule,
                        MdlIconModule,
                        MdlRippleModule,
                        MdlDialogModule,
                        MdlDialogOutletModule,
                    ],
                    exports: [DatePickerDialogComponent],
                    providers: [MdlDatePickerService],
                }]
        }] });

/*
 * Public API Surface of datepicker
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CURRENT_DATE, DATEPICKER_CONFIG, DatePickerDialogComponent, MdlDatePickerModule, MdlDatePickerService };
//# sourceMappingURL=angular-mdl-datepicker.mjs.map
//# sourceMappingURL=angular-mdl-datepicker.mjs.map

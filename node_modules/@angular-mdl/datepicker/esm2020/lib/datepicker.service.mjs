import { Injectable } from "@angular/core";
import { Subject } from "rxjs";
import { MdlDialogService } from "@angular-mdl/core";
import { CURRENT_DATE, DATEPICKER_CONFIG, DatePickerDialogComponent, } from "./datepicker.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular-mdl/core";
export class MdlDatePickerService {
    constructor(dialogService) {
        this.dialogService = dialogService;
    }
    selectDate(currentDate = null, options = {}) {
        const subject = new Subject();
        const pDialog = this.dialogService.showCustomDialog({
            classes: "mdl-datepicker",
            component: DatePickerDialogComponent,
            providers: [
                { provide: CURRENT_DATE, useValue: currentDate },
                { provide: DATEPICKER_CONFIG, useValue: options },
            ],
            isModal: true,
            styles: { width: "320px" },
            openFrom: options.openFrom,
        });
        pDialog.subscribe((dialogReference) => {
            dialogReference.onHide().subscribe((date) => {
                subject.next(date);
                subject.complete();
            });
        });
        return subject.asObservable();
    }
}
MdlDatePickerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerService, deps: [{ token: i1.MdlDialogService }], target: i0.ɵɵFactoryTarget.Injectable });
MdlDatePickerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MdlDatePickerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MdlDialogService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZGF0ZXBpY2tlci9zcmMvbGliL2RhdGVwaWNrZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFzQixnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pFLE9BQU8sRUFDTCxZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLHlCQUF5QixHQUMxQixNQUFNLHdCQUF3QixDQUFDOzs7QUFJaEMsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQixZQUFvQixhQUErQjtRQUEvQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7SUFBRyxDQUFDO0lBRWhELFVBQVUsQ0FDZixjQUEyQixJQUFJLEVBQy9CLFVBQTZCLEVBQUU7UUFFL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUVwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDO1lBQ2xELE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsU0FBUyxFQUFFLHlCQUF5QjtZQUNwQyxTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUU7Z0JBQ2hELEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7YUFDbEQ7WUFDRCxPQUFPLEVBQUUsSUFBSTtZQUNiLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7WUFDMUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1NBQzNCLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxlQUFtQyxFQUFFLEVBQUU7WUFDeEQsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQVUsRUFBRSxFQUFFO2dCQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQixPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hDLENBQUM7O2lIQTVCVSxvQkFBb0I7cUhBQXBCLG9CQUFvQjsyRkFBcEIsb0JBQW9CO2tCQURoQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IE1kbERpYWxvZ1JlZmVyZW5jZSwgTWRsRGlhbG9nU2VydmljZSB9IGZyb20gXCJAYW5ndWxhci1tZGwvY29yZVwiO1xuaW1wb3J0IHtcbiAgQ1VSUkVOVF9EQVRFLFxuICBEQVRFUElDS0VSX0NPTkZJRyxcbiAgRGF0ZVBpY2tlckRpYWxvZ0NvbXBvbmVudCxcbn0gZnJvbSBcIi4vZGF0ZXBpY2tlci5jb21wb25lbnRcIjtcbmltcG9ydCB7IERhdGVQaWNrZXJPcHRpb25zIH0gZnJvbSBcIi4vZGF0ZS1waWNrZXItb3B0aW9uXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNZGxEYXRlUGlja2VyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGlhbG9nU2VydmljZTogTWRsRGlhbG9nU2VydmljZSkge31cblxuICBwdWJsaWMgc2VsZWN0RGF0ZShcbiAgICBjdXJyZW50RGF0ZTogRGF0ZSB8IG51bGwgPSBudWxsLFxuICAgIG9wdGlvbnM6IERhdGVQaWNrZXJPcHRpb25zID0ge31cbiAgKTogT2JzZXJ2YWJsZTxEYXRlPiB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0PERhdGU+KCk7XG5cbiAgICBjb25zdCBwRGlhbG9nID0gdGhpcy5kaWFsb2dTZXJ2aWNlLnNob3dDdXN0b21EaWFsb2coe1xuICAgICAgY2xhc3NlczogXCJtZGwtZGF0ZXBpY2tlclwiLFxuICAgICAgY29tcG9uZW50OiBEYXRlUGlja2VyRGlhbG9nQ29tcG9uZW50LFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogQ1VSUkVOVF9EQVRFLCB1c2VWYWx1ZTogY3VycmVudERhdGUgfSxcbiAgICAgICAgeyBwcm92aWRlOiBEQVRFUElDS0VSX0NPTkZJRywgdXNlVmFsdWU6IG9wdGlvbnMgfSxcbiAgICAgIF0sXG4gICAgICBpc01vZGFsOiB0cnVlLFxuICAgICAgc3R5bGVzOiB7IHdpZHRoOiBcIjMyMHB4XCIgfSxcbiAgICAgIG9wZW5Gcm9tOiBvcHRpb25zLm9wZW5Gcm9tLFxuICAgIH0pO1xuICAgIHBEaWFsb2cuc3Vic2NyaWJlKChkaWFsb2dSZWZlcmVuY2U6IE1kbERpYWxvZ1JlZmVyZW5jZSkgPT4ge1xuICAgICAgZGlhbG9nUmVmZXJlbmNlLm9uSGlkZSgpLnN1YnNjcmliZSgoZGF0ZTogRGF0ZSkgPT4ge1xuICAgICAgICBzdWJqZWN0Lm5leHQoZGF0ZSk7XG4gICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cbn1cbiJdfQ==